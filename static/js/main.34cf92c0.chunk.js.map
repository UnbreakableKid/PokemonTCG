{"version":3,"sources":["Components/CardListItem.tsx","Components/CardList.tsx","Components/PokeTypes.tsx","Components/SearchForm.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CardListItem","card","imageURL","baseURL","name","evolvesFrom","artist","className","target","href","rel","src","alt","CardList","cards","length","map","imageUrl","id","PokeTypes","onInputChange","React","useState","types","setTypes","useEffect","a","axios","get","data","console","error","getTypes","type","toLowerCase","value","onChange","SearchForm","setCards","handleOnSubmit","e","preventDefault","searchTerm","join","setSearchTerm","log","getInitialCards","onSubmit","checked","current","filter","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0KAgCeA,G,MAxBmC,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACnDC,EAAO,yEACXF,EAAKG,MAAQ,GADF,wBAEGH,EAAKI,aAAe,GAFvB,6BAGXJ,EAAKK,QAAU,IAEjB,OACE,6BACE,mBACEC,UAAU,eACVC,OAAO,SACPC,KAAMN,EACNO,IAAI,sBAJN,SAME,qBACEH,UAAU,gBACVI,IAAKT,EACLU,IAAG,UAAKX,EAAKG,KAAV,4BCOES,EAhB2B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC3C,OAAOA,EAAMC,OAAS,EACpB,oBAAIR,UAAU,4GAAd,SACGO,GACCA,EAAME,KAAI,SAACf,GAAD,OACR,cAAC,EAAD,CAA4BA,KAAMA,EAAMC,SAAUD,EAAKgB,UAApChB,EAAKiB,SAI9B,sBAAKX,UAAU,6CAAf,UACG,IACD,oBAAIA,UAAU,iCAAd,6B,6ECiBSY,EAhC6B,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACvCC,IAAMC,SAAS,IADwB,mBAC1DC,EAD0D,KACnDC,EADmD,KAgBjE,OAbAH,IAAMI,WAAU,YACA,uCAAG,8BAAAC,EAAA,+EAEUC,IAAMC,IAAI,sCAFpB,gBAELC,EAFK,EAELA,KACRL,EAASK,EAAKN,OAHD,gDAKbO,QAAQC,MAAR,MALa,yDAAH,qDASdC,KACC,IAGD,qBAAKzB,UAAU,kEAAf,SACGgB,EAAMP,KAAI,SAACiB,GAAD,OACT,wBACE1B,UAAS,4EAAuE0B,EAAKC,cAA5E,mBAAoGD,EAAKC,eADpH,UAIG,IACD,+BAAOD,IACP,cAAC,IAAD,CAAU7B,KAAK,cAAc+B,MAAOF,EAAMG,SAAUhB,MAJ/Ca,SC8CAI,EApE+B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACzCC,EAAc,uCAAG,WAAOC,GAAP,iBAAAd,EAAA,6DACrBc,EAAEC,iBAEFH,EAAS,IAHY,kBAKIX,IAAMC,IAAN,kDACsBc,EADtB,kBAEnBnB,EAAMoB,KAAK,MAAQ,KAPJ,gBAKXd,EALW,EAKXA,KAMRS,EAAST,EAAKf,OACd8B,EAAc,IAZK,kDAcnBd,QAAQC,MAAR,MAdmB,0DAAH,sDAD0C,EAmB1BV,IAAMC,SAAS,IAnBW,mBAmBvDoB,EAnBuD,KAmB3CE,EAnB2C,OAoBpCvB,IAAMC,SAAkB,IApBY,mBAoBvDC,EApBuD,KAoBhDC,EApBgD,KA+C9D,OAfAC,qBAAU,YACa,uCAAG,8BAAAC,EAAA,+EAEGC,IAAMC,IAC3B,kDAHkB,gBAEZC,EAFY,EAEZA,KAIRS,EAAST,EAAKf,OANM,gDAQpBgB,QAAQe,IAAR,MARoB,yDAAH,qDAYrBC,KACC,CAACR,IAEF,uBAAM/B,UAAU,kCAAkCwC,SAAUR,EAA5D,UACE,gCACE,cAAC,IAAD,CACEhC,UAAU,6DACV0B,KAAK,OACLE,MAAOO,EACPN,SAAU,SAACI,GAAD,OAAOI,EAAcJ,EAAEhC,OAAO2B,UAE1C,cAAC,IAAD,CACE5B,UAAU,gEACV0B,KAAK,SAFP,uBAOF,cAAC,EAAD,CAAWb,cAzCU,SAACoB,GAAY,IAAD,EACRA,EAAEhC,OAArB2B,EAD2B,EAC3BA,MAAOa,EADoB,EACpBA,QAGbxB,EADEwB,EACO,SAACC,GAAD,4BAAiBA,GAAjB,CAA0Bd,KAE1BZ,EAAM2B,QAAO,SAACjB,GAAD,OAAUA,IAASE,aCnBhCgB,MAff,WAAgB,IAAD,EACa9B,IAAMC,SAAiB,IADpC,mBACNR,EADM,KACCwB,EADD,KAEb,OACE,sBAAK/B,UAAU,gBAAf,UACE,qBAAKA,UAAU,iCAAf,SACE,oBAAIA,UAAU,2BAAd,uBAEF,sBAAKA,UAAU,gBAAf,UACE,cAAC,EAAD,CAAY+B,SAAUA,IACtB,cAAC,EAAD,CAAUxB,MAAOA,WCAVsC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.34cf92c0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { card } from \"./CardList\";\r\n\r\ninterface CardListItemProps {\r\n  card: card;\r\n  imageURL: string;\r\n}\r\n\r\nconst CardListItem: React.FC<CardListItemProps> = ({ card, imageURL }) => {\r\n  const baseURL = `https://www.pokemon.com/us/pokemon-tcg/pokemon-cards/?cardName=${\r\n    card.name || \"\"\r\n  }&evolvesFrom=${card.evolvesFrom || \"\"}&particularArtist=${\r\n    card.artist || \"\"\r\n  }`;\r\n  return (\r\n    <li>\r\n      <a\r\n        className=\"block h-full\"\r\n        target=\"_blank\"\r\n        href={baseURL}\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        <img\r\n          className=\"w-full h-auto\"\r\n          src={imageURL}\r\n          alt={`${card.name} PokÃ©mon Card`}\r\n        />\r\n      </a>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default CardListItem;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport CardListItem from \"./CardListItem\";\r\n\r\nexport interface card {\r\n  name: string;\r\n  artist: string;\r\n  evolvesFrom: string;\r\n  imageUrl: string;\r\n  id: number;\r\n}\r\n\r\ninterface CardListProps {\r\n  cards: card[];\r\n}\r\n\r\nconst CardList: React.FC<CardListProps> = ({ cards }) => {\r\n  return cards.length > 0 ? (\r\n    <ul className=\"m-5 overflow-y-scroll grid gap-10 grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6\">\r\n      {cards &&\r\n        cards.map((card) => (\r\n          <CardListItem key={card.id} card={card} imageURL={card.imageUrl} />\r\n        ))}\r\n    </ul>\r\n  ) : (\r\n    <div className=\"flex flex-grow justify-center items-center\">\r\n      {\" \"}\r\n      <h1 className=\"text-black text-2xl font-light\"> No Results</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import { Checkbox, Input } from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport React from \"react\";\r\n\r\ninterface PokeTypesProps {\r\n  onInputChange: (e: any) => void;\r\n}\r\n\r\nexport interface Types {\r\n  name: string;\r\n}\r\n\r\nconst PokeTypes: React.FC<PokeTypesProps> = ({ onInputChange }) => {\r\n  const [types, setTypes] = React.useState([]);\r\n\r\n  React.useEffect(() => {\r\n    const getTypes = async () => {\r\n      try {\r\n        const { data } = await axios.get(\"https://api.pokemontcg.io/v1/types\");\r\n        setTypes(data.types);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    getTypes();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"w-full grid grid-cols-3 sm:grid-cols-4 md:grid-cols-6 gap-2 p-5\">\r\n      {types.map((type: string) => (\r\n        <label\r\n          className={`flex justify-between border rounded py-1 px-2 cursor-pointer text-${type.toLowerCase()} border-${type.toLowerCase()}`}\r\n          key={type}\r\n        >\r\n          {\" \"}\r\n          <span>{type}</span>\r\n          <Checkbox name=\"pokemonType\" value={type} onChange={onInputChange} />\r\n        </label>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PokeTypes;\r\n","import axios from \"axios\";\r\nimport React, { Dispatch, useEffect } from \"react\";\r\nimport { card } from \"./CardList\";\r\n\r\nimport { Input, Button } from \"@chakra-ui/react\";\r\nimport PokeTypes, { Types } from \"./PokeTypes\";\r\n\r\ninterface SearchFormProps {\r\n  setCards: Dispatch<card[]>;\r\n}\r\n\r\nconst SearchForm: React.FC<SearchFormProps> = ({ setCards }) => {\r\n  const handleOnSubmit = async (e: any) => {\r\n    e.preventDefault();\r\n\r\n    setCards([]);\r\n    try {\r\n      const { data } = await axios.get(\r\n        `https://api.pokemontcg.io/v1/cards?name=${searchTerm}&types=${\r\n          types.join(\",\") || \"\"\r\n        }`\r\n      );\r\n\r\n      setCards(data.cards);\r\n      setSearchTerm(\"\");\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const [searchTerm, setSearchTerm] = React.useState(\"\");\r\n  const [types, setTypes] = React.useState<Types[]>([]);\r\n\r\n  const handleTypeChange = (e: any) => {\r\n    const { value, checked } = e.target;\r\n\r\n    if (checked) {\r\n      setTypes((current) => [...current, value]);\r\n    } else {\r\n      setTypes(types.filter((type) => type !== value));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const getInitialCards = async () => {\r\n      try {\r\n        const { data } = await axios.get(\r\n          \"https://api.pokemontcg.io/v1/cards?pageSize=50\"\r\n        );\r\n\r\n        setCards(data.cards);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    };\r\n\r\n    getInitialCards();\r\n  }, [setCards]);\r\n  return (\r\n    <form className=\"flex flex-col items-center my-5\" onSubmit={handleOnSubmit}>\r\n      <div>\r\n        <Input\r\n          className=\"border border-grey-500 rounded shadow h-full flex-grow p-1\"\r\n          type=\"text\"\r\n          value={searchTerm}\r\n          onChange={(e) => setSearchTerm(e.target.value)}\r\n        ></Input>\r\n        <Button\r\n          className=\"bg-blue-700 text-white border rounded shadow px-2 ml-2 h-full\"\r\n          type=\"submit\"\r\n        >\r\n          Search\r\n        </Button>\r\n      </div>\r\n      <PokeTypes onInputChange={handleTypeChange} />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default SearchForm;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport CardList, { card } from \"./Components/CardList\";\nimport SearchForm from \"./Components/SearchForm\";\n\nfunction App() {\n  const [cards, setCards] = React.useState<card[]>([]);\n  return (\n    <div className=\"flex flex-col\">\n      <div className=\"flex justify-center bg-red-700\">\n        <h1 className=\"text-3xl text-white py-2\">Pokemon</h1>\n      </div>\n      <div className=\"flex flex-col\">\n        <SearchForm setCards={setCards} />\n        <CardList cards={cards} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}